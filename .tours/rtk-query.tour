{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "RTK Query",
  "steps": [
    {
      "file": "src/pokemonService.ts",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 2,
          "character": 1
        }
      },
      "description": "Let's use RTK Query here, the React Query of Redux, to call the Poke API and have some fun."
    },
    {
      "file": "src/pokemonService.ts",
      "selection": {
        "start": {
          "line": 3,
          "character": 27
        },
        "end": {
          "line": 3,
          "character": 36
        }
      },
      "description": "`createApi` is a function that helps us define a service for redux use."
    },
    {
      "file": "src/pokemonService.ts",
      "selection": {
        "start": {
          "line": 5,
          "character": 1
        },
        "end": {
          "line": 6,
          "character": 1
        }
      },
      "description": "It uses `fetch` under the hood (configurable), and we can define the API URL here, endpoints will come later."
    },
    {
      "file": "src/pokemonService.ts",
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 21,
          "character": 8
        }
      },
      "description": "The `endpoints` key is like the reducer of our query service, we define query names and what they do using the `builder` parameter. If we're doing a GET (default) request, we can use `builder.query`, or for everything else, we use `builder.mutation`. If you're familiar with `fetch` or `axios` the parameters look pretty familiar and you can see what to expect. This `invalidates` key under the mutation is for invalidating the cache we defined in `entityTypes`, so when we create a new Pokemon, we should build a new cache."
    },
    {
      "file": "src/pokemonService.ts",
      "selection": {
        "start": {
          "line": 24,
          "character": 42
        },
        "end": {
          "line": 24,
          "character": 66
        }
      },
      "description": "These variables are autogenerated based on our `builder` usage, `getPokemonById` key with `builder.query` becomes `useGetPokemonByIdQuery`, the mutation one becomes `useCreatePokemonMutation`"
    },
    {
      "file": "src/index.js",
      "selection": {
        "start": {
          "line": 11,
          "character": 1
        },
        "end": {
          "line": 18,
          "character": 4
        }
      },
      "description": "Since the service has a reducer, we have to connect it to the redux store. We also add a middleware key, which is useful for caching, polling, invalidation, and other things."
    },
    {
      "file": "src/Main.tsx",
      "selection": {
        "start": {
          "line": 4,
          "character": 1
        },
        "end": {
          "line": 5,
          "character": 1
        }
      },
      "description": "We can import our query in our UI component, and see how it works."
    },
    {
      "file": "src/Main.tsx",
      "selection": {
        "start": {
          "line": 18,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 1
        }
      },
      "description": "The query object comes with useful helpers out of the box, for fetching data (and if it errored, or still loading.)"
    },
    {
      "file": "src/Main.tsx",
      "selection": {
        "start": {
          "line": 29,
          "character": 1
        },
        "end": {
          "line": 39,
          "character": 16
        }
      },
      "description": "We can add a fragment here for grabbing and displaying pieces of data we get from the API. It will also handle caching for us, which we can observe through the devtools or network tab."
    }
  ]
}